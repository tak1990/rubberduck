<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AtomDescription_CarriageReturn" xml:space="preserve">
    <value>ASCII 文字 'CR' (復帰) に一致</value>
  </data>
  <data name="AtomDescription_CharacterClass" xml:space="preserve">
    <value>次の文字のいずれかに一致: {0}</value>
  </data>
  <data name="AtomDescription_CharacterClass_Inverted" xml:space="preserve">
    <value>次の文字以外の文字に一致: {0}</value>
  </data>
  <data name="AtomDescription_Digit" xml:space="preserve">
    <value>任意の数字に一致します。"[0-9]" に相当</value>
  </data>
  <data name="AtomDescription_Dot" xml:space="preserve">
    <value>任意の文字に一致</value>
  </data>
  <data name="AtomDescription_FormFeed" xml:space="preserve">
    <value>ASCII 文字 'FF' (フォームフィード) に一致</value>
  </data>
  <data name="AtomDescription_Group" xml:space="preserve">
    <value>キャプチャ グループ '{0}' に一致</value>
  </data>
  <data name="AtomDescription_HTab" xml:space="preserve">
    <value>ASCII 文字 'HT' (水平タブ) に一致</value>
  </data>
  <data name="AtomDescription_Literal_ActualLiteral" xml:space="preserve">
    <value>リテラル '{0}' に一致</value>
  </data>
  <data name="AtomDescription_Literal_Backreference" xml:space="preserve">
    <value>{0} の位置のキャプチャ グループが再度完全に一致</value>
  </data>
  <data name="AtomDescription_Literal_EscapedLiteral" xml:space="preserve">
    <value>エスケープされたリテラル {0} に一致</value>
  </data>
  <data name="AtomDescription_Literal_HexCodepoint" xml:space="preserve">
    <value>16 進 ASCII 値 {0} に一致</value>
  </data>
  <data name="AtomDescription_Literal_OctalCodepoint" xml:space="preserve">
    <value>8 進数の ASCII 値 {0} に一致</value>
  </data>
  <data name="AtomDescription_Literal_UnicodePoint" xml:space="preserve">
    <value>Unicode コードポイント {0} に一致</value>
  </data>
  <data name="AtomDescription_Newline" xml:space="preserve">
    <value>ASCII 文字 'LF' (改行) に一致</value>
  </data>
  <data name="AtomDescription_NonDigit" xml:space="preserve">
    <value>数字以外の数字と一致します。"[^\d]" に相当します。</value>
  </data>
  <data name="AtomDescription_NonWhitespace" xml:space="preserve">
    <value>空白以外の文字と一致します。"[^\s]" に相当します。</value>
  </data>
  <data name="AtomDescription_NonWordBoundary" xml:space="preserve">
    <value>現在の位置が "非ワード境界" に位置することを確認します。</value>
  </data>
  <data name="AtomDescription_NonWordCharacter" xml:space="preserve">
    <value>"単語以外の文字" と一致します。"[^\w]" に相当します。</value>
  </data>
  <data name="AtomDescription_VTab" xml:space="preserve">
    <value>ASCII 文字 'VT' (垂直タブ) に一致します。</value>
  </data>
  <data name="AtomDescription_Whitespace" xml:space="preserve">
    <value>任意の空白文字に一致します。"[ t\r\n\v\f]" に相当します。</value>
  </data>
  <data name="AtomDescription_WordBoundary" xml:space="preserve">
    <value>現在の位置が "単語境界" に位置することを確認します。</value>
  </data>
  <data name="AtomDescription_WordCharacter" xml:space="preserve">
    <value>任意の "単語文字" と一致します。"[a-zA-Z0-9]" に相当</value>
  </data>
  <data name="ExpressionDescription_AlternativesExpression" xml:space="preserve">
    <value>{0} の選択肢の 1 つに一致</value>
  </data>
  <data name="ExpressionDescription_ConcatenatedExpression" xml:space="preserve">
    <value>リテラル シーケンスに一致</value>
  </data>
  <data name="ExpressionDescription_ErrorExpression" xml:space="preserve">
    <value>'{0}' をリテラルとして解析できませんでした。</value>
  </data>
  <data name="PatternDescription_AnchorEnd" xml:space="preserve">
    <value>$ は文字列のすべての文字が消費されることを保証します</value>
  </data>
  <data name="PatternDescription_AnchorEnd_GlobalEnabled" xml:space="preserve">
    <value>$ は、行が終了したか、入力のすべての文字が消費されていることを確認します。</value>
  </data>
  <data name="PatternDescription_AnchorStart" xml:space="preserve">
    <value>^ は、一致する文字列の先頭に位置していることを確認します。</value>
  </data>
  <data name="PatternDescription_AnchorStart_GlobalEnabled" xml:space="preserve">
    <value>^ は、マッチする行の先頭からマッチする</value>
  </data>
  <data name="PatternDescription_IgnoreCase" xml:space="preserve">
    <value>すべての一致は、リテラルの大文字または小文字を無視します。</value>
  </data>
  <data name="Quantifer_Plus" xml:space="preserve">
    <value>少なくとも 1 回 (1+)</value>
  </data>
  <data name="Quantifier_Asterisk" xml:space="preserve">
    <value>任意の回数 (0+)</value>
  </data>
  <data name="Quantifier_ClosedRange" xml:space="preserve">
    <value>{0} 回から {1} 回</value>
  </data>
  <data name="Quantifier_Exact" xml:space="preserve">
    <value>正確に {0} 回</value>
  </data>
  <data name="Quantifier_None" xml:space="preserve">
    <value>正確に一度 (1)</value>
  </data>
  <data name="Quantifier_OpenRange" xml:space="preserve">
    <value>少なくとも {0} 回</value>
  </data>
  <data name="Quantifier_Optional" xml:space="preserve">
    <value>最大 1 回 (1-)</value>
  </data>
</root>