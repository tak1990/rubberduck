<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Assert_DimensionMismatchFormat" xml:space="preserve">
    <value>予期される寸法は {0}。実際には、{1} の寸法があります。{2}</value>
  </data>
  <data name="Assert_EasterEggAssertClassPassed" xml:space="preserve">
    <value>さて、Rubberduck は主張しました。 さて何ですか。</value>
  </data>
  <data name="Assert_EasterEggIFakePassed" xml:space="preserve">
    <value>期待値: スタック オーバーフロー?; 実績: ガード条項。</value>
  </data>
  <data name="Assert_EasterEggIVerifyPassed" xml:space="preserve">
    <value>IVerify も検証します。</value>
  </data>
  <data name="Assert_FailedMessageFormat" xml:space="preserve">
    <value>{0} アサーションに失敗しました。{1}</value>
  </data>
  <data name="Assert_InvalidFakePassThrough" xml:space="preserve">
    <value>IFake {0} の設定が無効です。パススルー プロパティは False にする必要があります。</value>
  </data>
  <data name="Assert_LBoundMismatchFormat" xml:space="preserve">
    <value>ディメンション {0}: 期待される LBound が {1}。実際には、{2} の LBound があります。{3}</value>
  </data>
  <data name="Assert_MismatchedTypes" xml:space="preserve">
    <value>[期待値] と [実績] 値は同じ型ではありません。</value>
  </data>
  <data name="Assert_NeitherParameterIsArray" xml:space="preserve">
    <value>[期待値] も [実績] も配列ではありません。</value>
  </data>
  <data name="Assert_NotImplemented" xml:space="preserve">
    <value>実装されていません。</value>
  </data>
  <data name="Assert_ParameterIsNotArrayFormat" xml:space="preserve">
    <value>{0} 配列ではありません。</value>
  </data>
  <data name="Assert_ParameterResultFormat" xml:space="preserve">
    <value>期待値: {0}; 実績: {1} {2}</value>
  </data>
  <data name="Assert_ReferenceValueMismatch" xml:space="preserve">
    <value>[期待値] は参照型で、[実績] は値型です。</value>
  </data>
  <data name="Assert_UBoundMismatchFormat" xml:space="preserve">
    <value>ディメンション {0}: 予期される UBound が {1}。実際には、{2} の UBound があります。{3}</value>
  </data>
  <data name="Assert_UnexpectedArrayFormat" xml:space="preserve">
    <value>[期待値] と [実績] は配列です。{0} の使用を検討してください。</value>
  </data>
  <data name="Assert_UnexpectedNullArraysFormat" xml:space="preserve">
    <value>[期待値] と [実績] は何もありません。{0} の使用を検討してください。</value>
  </data>
  <data name="Assert_UnexpectedReferenceComparisonFormat" xml:space="preserve">
    <value>[期待値] と [実績] は参照型です。{0} の使用を検討してください。</value>
  </data>
  <data name="Assert_UnexpectedValueComparisonFormat" xml:space="preserve">
    <value>[期待値] と [実績] は値型です。{0} の使用を検討してください。</value>
  </data>
  <data name="Assert_ValueReferenceMismatch" xml:space="preserve">
    <value>[期待値] は値型で、[実績] は参照型です。</value>
  </data>
  <data name="Assert_VerifyInternalErrorMessage" xml:space="preserve">
    <value>Rubberduck は呼び出し結果を処理できませんでした。</value>
  </data>
  <data name="Assert_VerifyNoInvocationFormat" xml:space="preserve">
    <value>パラメーター {0} に一致する呼び出しはありません。呼び出し {1} のみ。{2}</value>
  </data>
  <data name="Assert_VerifyParameterNonNumeric" xml:space="preserve">
    <value>呼び出し {1} のパラメーター {0} が数値ではありません。{2}</value>
  </data>
  <data name="Assert_VerifyParameterNotPassed" xml:space="preserve">
    <value>呼び出し {1} でパラメーター {0} が渡されませんでした。{2}</value>
  </data>
  <data name="Prerequisite_EarlyBindingReferenceMissing" xml:space="preserve">
    <value>事前バインディング テストに必要な Rubberduck への参照を解決できませんでした。破損している可能性があります。</value>
  </data>
  <data name="TestRunner_ComException" xml:space="preserve">
    <value>テストの実行中に予期しない COM 例外が発生しました。</value>
  </data>
  <data name="TestRunner_ExceptionDuringRun" xml:space="preserve">
    <value>テスト メソッドの実行に失敗しました。</value>
  </data>
  <data name="TestRunner_GenericException" xml:space="preserve">
    <value>テストの実行中に予期しない例外が発生しました。</value>
  </data>
  <data name="TestRunner_ModuleInitializeFailure" xml:space="preserve">
    <value>@ModuleInitialize を実行しようとしたときに何かがうまくいかなかった。モジュールがスキップされました。</value>
  </data>
  <data name="TestRunner_TestInitializeFailure" xml:space="preserve">
    <value>@TestInitialize を実行しようとしたときに何かがうまくいかなかった。テストがスキップされました。</value>
  </data>
</root>